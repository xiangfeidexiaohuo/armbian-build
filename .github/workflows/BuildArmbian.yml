name: Build Armbian

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - branch: current
          - branch: edge
    steps:
    - name: Checkout Armbian build repository
      uses: actions/checkout@v4
      with:
        repository: xiangfeidexiaohuo/armbian-build
        ref: main

    - name: Run Armbian compile
      run: |
        sudo -E ./compile.sh build BOARD=easepi-r1 KERNEL_BTF=no BRANCH=${{ matrix.branch }} BUILD_DESKTOP=no BUILD_MINIMAL=yes KERNEL_CONFIGURE=no RELEASE=trixie

    - name: Prepare and zip image
      run: |
        ZIP_NAME="Armbian-unofficial_Easepi-R1-Pro_trixie_${{ matrix.branch }}_$(date +%Y%m%d).zip"
        sudo -E zip -r output/${ZIP_NAME} output/images/*_minimal.img

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: armbian-${{ matrix.branch }}
        path: output/*.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@main
        with:
          path: downloaded_artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          find downloaded_artifacts -name "Armbian-*.zip" -exec cp {} release_assets \;
      
      - name: Generate release info
        id: release_info
        run: |
          echo "release_tag=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "release_name=EasepiR1-Pro-非官方armbian-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          name: ${{ steps.release_info.outputs.release_name }}
          files: |
            release_assets/*
          token: ${{ secrets.ARMBIAN_TOKEN }}
